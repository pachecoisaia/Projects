import numpy as np
import pyaes

# Rijndael S-box
sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

# Rijndael Rcon
Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
        0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
        0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
        0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
        0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
        0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
        0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
        0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
        0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
        0xe8, 0xcb]

class myMul:
    def addRoundKey(self, state, iteration):
        subroundKey = rndkeys[iteration * 16:(iteration * 16) + 16]
        T = []
        for x in range(4):
            #subroundKey.append(subroundKey)
            T.append(subroundKey[x::4])
        #print("T",T)

        inst = np.array(T)
        instFlat = inst.flatten()
        instT = np.transpose(instFlat)
        #print(instFlat.T)
        srk = instT.tolist()

        #print(state, "SubRoundKey",iteration, srk)
        updated_state = list ( a ^ b for a,b, in zip(state,srk))
        #print(updated_state)
        return updated_state

    def gfunction(self,word, iteration):
        #shift one byte
        new_word = []
        for i in range(4):
            new_word.append( word[(i+1) % 4])
        #print("newword", new_word)
        subword = []
        for i in range(0,4):
            nibble = bin(new_word[i])[2:].zfill(8)
            hi = int(nibble[0:4], 2)
            lo = int(nibble[4:],2)

            #print("new_word[", i,"]", new_word[i], "hi=", hi,"lo=",lo,  "sbox=",sbox[(hi * 16) + lo])
            # xor with round constant based on table
            if (i == 0):
                # substion using sbox map 8 bits to new 8 bits
                val = sbox[(hi * 16) + lo] ^ Rcon[iteration]
                #print(chr(val),val)
                subword.append(val)

            # substion using sbox map 8 bits to new 8 bits
            #subword += str(sbox[(hi * 16) + lo])
            else:
                #print(chr(sbox[(hi * 16) + lo]),sbox[(hi * 16) + lo])
                subword.append(sbox[(hi * 16) + lo])

        return subword

    def keyexansion(self,key):
        list = []
        word = []
        subkeys = []
        roundkeys = []

        for byte in range(16):
            word.append(ord(key[byte]))
            if(byte % 4 == 3):
                #print((byte // 4), (byte // 4) + 4, (byte // 4) + 8, (byte // 4) + 12, word)
                list.append(word)
                word = []

        for i in range(4,44):
            if (i%4 == 0):
                temp = self.gfunction(list[i - 1], i // 4)
                for n in range(4):
                    word.append(list[i - 4][n] ^ temp[n])
                list.append(word)
                word = []
            else:
                for n in range(4):
                    word.append(list[i - 4][n] ^ list[i-1][n])
                list.append(word)
                word = []

        lst1 = []
        #print("len=",len(list))
        for i in range(0,44):
            for x in list[i]:
                lst1.append(x)

        #print(lst1)
        grouping = []
        for i in range(0,11):
            if (i > 0 ):
                print("Rnd",i," Key:",lst1[i*16:i*16+16])
            else:
                print("Init", "  Key:", lst1[i * 16:i * 16 + 16])
        return lst1

    def shiftrows(self,state):
        b = state[:]
        for i in range(16):
            row = i // 4
            col = i % 4
            b[i] = state[(row * 4) + ((col + row) % 4)]
        return b

    def subbytes(self,state):
        for index in range(0,16):
            binar= bin(state[index])[2:].zfill(8)
            hi = int(binar[0:4],2)
            lo = int(binar[4:],2)
            state[index] = sbox[(hi * 16) + lo]
            #print(hi, lo, b[i], "dec hi= ", int(hi),"sbox[]=",sbox[(hi * 16) + lo], ((hi * 16) + lo))
        return state

    def galois_multiplication(self, a, b):
        p = 0
        for counter in range(8):
            if b & 1: p ^= a
            hi_bit_set = a & 0x80
            a <<= 1
            # keep a 8 bit
            a &= 0xFF
            if hi_bit_set:
                a ^= 0x1b
            b >>= 1
        return p

    # galois multiplication of the 4x4 matrix
    def mixColumns(self, state, isInv):
        # iterate over the 4 columns
        for i in range(4):
            # extract each column in the state matrix
            # 1st col is [97, 98, 99 ,100]
            column = state[i:i+16:4]
            # apply the mixColumn on one column
            column = self.mixColumn(column, isInv)
            # put the values back into the state
            state[i:i+16:4] = column
        return state

    # galois multiplication of 1 column of the 4x4 matrix
    # isInv = False when encoding; True when decoding
    def mixColumn(self, column, isInv):
        if isInv:
            mult = [14, 9, 13, 11]
        else:
            mult = [2, 1, 1, 3]
        cpy = list(column)
        g = self.galois_multiplication

        column[0] = g(cpy[0], mult[0]) ^ g(cpy[3], mult[1]) ^ \
                    g(cpy[2], mult[2]) ^ g(cpy[1], mult[3])
        column[1] = g(cpy[1], mult[0]) ^ g(cpy[0], mult[1]) ^ \
                    g(cpy[3], mult[2]) ^ g(cpy[2], mult[3])
        column[2] = g(cpy[2], mult[0]) ^ g(cpy[1], mult[1]) ^ \
                    g(cpy[0], mult[2]) ^ g(cpy[3], mult[3])
        column[3] = g(cpy[3], mult[0]) ^ g(cpy[2], mult[1]) ^ \
                    g(cpy[1], mult[2]) ^ g(cpy[0], mult[3])
        return column

if __name__ == "__main__":
    key = "2F45dx97ABe28016"
    plaintext = "AESimplementbyme"
    state = [ ord(plaintext[0]), ord(plaintext[4]),ord(plaintext[8]),ord(plaintext[12]), \
              ord(plaintext[1]), ord(plaintext[5]),ord(plaintext[9]), ord(plaintext[13]), \
              ord(plaintext[2]), ord(plaintext[6]),ord(plaintext[10]),ord(plaintext[14]), \
              ord(plaintext[3]), ord(plaintext[7]),ord(plaintext[11]), ord(plaintext[15])]
    print("================Plaintext ================")
    print("\n",state,"\n")
    print("================Key Expansion ================")
    rndkeys = myMul().keyexansion(key)
    #print("plaintext=",state,"\n")

    state = myMul().addRoundKey(state, 0)
    print("\n================AES Encryption ================")
    print("Rnd 0 Enc", state)
    for iteration in range(1,11):
        if (iteration < 10):
            state = myMul().subbytes(state)
            #print("sub bytes: ", state)
            state = myMul().shiftrows(state)
            #print("shift rows: ", state)
            state = myMul().mixColumns(state, False)
            #print
            state = myMul().addRoundKey(state, iteration)
        else:
            state = myMul().subbytes(state)
            state = myMul().shiftrows(state)
            state = myMul().addRoundKey(state, iteration)
        print("Rnd", iteration, "Enc:", state)

    c_text = ""
    for i in range(0,4):
        for j in state[i::4]:
            c_text+= chr(j)
    print("\nmyciphertext=", c_text)

    key2 = key.encode('utf-8')
    aes = pyaes.AESModeOfOperationECB(key2)
    print("aes.decrypt(myciphertext)=" , aes.decrypt(c_text).decode('utf-8'))
    ciphertext2 = aes.encrypt(plaintext)



